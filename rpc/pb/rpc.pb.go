// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	SubscribeRequest
	SubscribeResponse
	NonParamsRequest
	NodeInfoResponse
	RouteTable
	GetNebStateResponse
	AccountsResponse
	GetAccountStateRequest
	GetAccountStateResponse
	CallResponse
	ByBlockHeightRequest
	GetDynastyResponse
	TransactionRequest
	ContractRequest
	SendRawTransactionRequest
	SendTransactionResponse
	GetBlockByHashRequest
	GetBlockByHeightRequest
	GetTransactionByHashRequest
	GetTransactionByContractRequest
	BlockResponse
	TransactionResponse
	NewAccountRequest
	NewAccountResponse
	UnlockAccountRequest
	UnlockAccountResponse
	LockAccountRequest
	LockAccountResponse
	SignHashRequest
	SignHashResponse
	GenerateRandomSeedRequest
	GenerateRandomSeedResponse
	SignTransactionPassphraseRequest
	SignTransactionPassphraseResponse
	SendTransactionPassphraseRequest
	GasPriceResponse
	HashRequest
	GasResponse
	EventsResponse
	Event
	PprofRequest
	PprofResponse
	GetConfigResponse
*/
package rpcpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import consensuspb "github.com/polar9527/go-nebulas/consensus/pb"
import _ "github.com/polar9527/go-nebulas/core/pb"
import nebletpb "github.com/polar9527/go-nebulas/neblet/pb"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Request message of Subscribe rpc
type SubscribeRequest struct {
	Topics []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *SubscribeRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

// Request message of Subscribe rpc
type SubscribeResponse struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *SubscribeResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SubscribeResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// Request message of non params.
type NonParamsRequest struct {
}

func (m *NonParamsRequest) Reset()                    { *m = NonParamsRequest{} }
func (m *NonParamsRequest) String() string            { return proto.CompactTextString(m) }
func (*NonParamsRequest) ProtoMessage()               {}
func (*NonParamsRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

// Response message of node info.
type NodeInfoResponse struct {
	// the node ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the block chainID.
	ChainId uint32 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// coinbase
	Coinbase string `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// Number of peers currenly connected.
	PeerCount uint32 `protobuf:"varint,4,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	// the node synchronized status.
	Synchronized bool `protobuf:"varint,5,opt,name=synchronized,proto3" json:"synchronized,omitempty"`
	// the node route table bucket size.
	BucketSize int32 `protobuf:"varint,6,opt,name=bucket_size,json=bucketSize,proto3" json:"bucket_size,omitempty"`
	// the network protocol version.
	ProtocolVersion string        `protobuf:"bytes,10,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	RouteTable      []*RouteTable `protobuf:"bytes,11,rep,name=route_table,json=routeTable" json:"route_table,omitempty"`
}

func (m *NodeInfoResponse) Reset()                    { *m = NodeInfoResponse{} }
func (m *NodeInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeInfoResponse) ProtoMessage()               {}
func (*NodeInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *NodeInfoResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfoResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *NodeInfoResponse) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *NodeInfoResponse) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func (m *NodeInfoResponse) GetSynchronized() bool {
	if m != nil {
		return m.Synchronized
	}
	return false
}

func (m *NodeInfoResponse) GetBucketSize() int32 {
	if m != nil {
		return m.BucketSize
	}
	return 0
}

func (m *NodeInfoResponse) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *NodeInfoResponse) GetRouteTable() []*RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return nil
}

type RouteTable struct {
	Id      string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address []string `protobuf:"bytes,2,rep,name=address" json:"address,omitempty"`
}

func (m *RouteTable) Reset()                    { *m = RouteTable{} }
func (m *RouteTable) String() string            { return proto.CompactTextString(m) }
func (*RouteTable) ProtoMessage()               {}
func (*RouteTable) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

func (m *RouteTable) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RouteTable) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

// Response message of GetNebState rpc.
type GetNebStateResponse struct {
	// Block chain id
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current neb tail hash
	Tail string `protobuf:"bytes,2,opt,name=tail,proto3" json:"tail,omitempty"`
	// Current neb lib hash
	Lib string `protobuf:"bytes,3,opt,name=lib,proto3" json:"lib,omitempty"`
	// Current neb tail block height
	Height uint64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// The current neb protocol version.
	ProtocolVersion string `protobuf:"bytes,6,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// The peer sync status.
	Synchronized bool `protobuf:"varint,7,opt,name=synchronized,proto3" json:"synchronized,omitempty"`
	// neb version
	Version string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *GetNebStateResponse) Reset()                    { *m = GetNebStateResponse{} }
func (m *GetNebStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNebStateResponse) ProtoMessage()               {}
func (*GetNebStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *GetNebStateResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *GetNebStateResponse) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *GetNebStateResponse) GetLib() string {
	if m != nil {
		return m.Lib
	}
	return ""
}

func (m *GetNebStateResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetNebStateResponse) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *GetNebStateResponse) GetSynchronized() bool {
	if m != nil {
		return m.Synchronized
	}
	return false
}

func (m *GetNebStateResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Response message of Accounts rpc.
type AccountsResponse struct {
	// Account list
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *AccountsResponse) Reset()                    { *m = AccountsResponse{} }
func (m *AccountsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountsResponse) ProtoMessage()               {}
func (*AccountsResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{6} }

func (m *AccountsResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Request message of GetAccountState rpc.
type GetAccountStateRequest struct {
	// Hex string of the account addresss.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// block account state with height. If not specified, use 0 as tail height.
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GetAccountStateRequest) Reset()                    { *m = GetAccountStateRequest{} }
func (m *GetAccountStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateRequest) ProtoMessage()               {}
func (*GetAccountStateRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{7} }

func (m *GetAccountStateRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetAccountStateRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// Response message of GetAccountState rpc.
type GetAccountStateResponse struct {
	// Current balance in unit of 1/(10^18) nas.
	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Current transaction count.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Account type
	Type uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *GetAccountStateResponse) Reset()                    { *m = GetAccountStateResponse{} }
func (m *GetAccountStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountStateResponse) ProtoMessage()               {}
func (*GetAccountStateResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{8} }

func (m *GetAccountStateResponse) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *GetAccountStateResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GetAccountStateResponse) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// Response message of Call rpc.
type CallResponse struct {
	// result of smart contract method call.
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// execute error
	ExecuteErr string `protobuf:"bytes,2,opt,name=execute_err,json=executeErr,proto3" json:"execute_err,omitempty"`
	// estimate gas used
	EstimateGas string `protobuf:"bytes,3,opt,name=estimate_gas,json=estimateGas,proto3" json:"estimate_gas,omitempty"`
}

func (m *CallResponse) Reset()                    { *m = CallResponse{} }
func (m *CallResponse) String() string            { return proto.CompactTextString(m) }
func (*CallResponse) ProtoMessage()               {}
func (*CallResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{9} }

func (m *CallResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *CallResponse) GetExecuteErr() string {
	if m != nil {
		return m.ExecuteErr
	}
	return ""
}

func (m *CallResponse) GetEstimateGas() string {
	if m != nil {
		return m.EstimateGas
	}
	return ""
}

// ByBlockHeightRequest message
type ByBlockHeightRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ByBlockHeightRequest) Reset()                    { *m = ByBlockHeightRequest{} }
func (m *ByBlockHeightRequest) String() string            { return proto.CompactTextString(m) }
func (*ByBlockHeightRequest) ProtoMessage()               {}
func (*ByBlockHeightRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{10} }

func (m *ByBlockHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// Response message of GetDynastyRequest rpc
type GetDynastyResponse struct {
	Miners []string `protobuf:"bytes,1,rep,name=miners" json:"miners,omitempty"`
}

func (m *GetDynastyResponse) Reset()                    { *m = GetDynastyResponse{} }
func (m *GetDynastyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDynastyResponse) ProtoMessage()               {}
func (*GetDynastyResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{11} }

func (m *GetDynastyResponse) GetMiners() []string {
	if m != nil {
		return m.Miners
	}
	return nil
}

// Request message of SendTransaction rpc.
type TransactionRequest struct {
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Amount of value sending with this transaction.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction nonce.
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// gasPrice sending with this transaction.
	GasPrice string `protobuf:"bytes,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// gasLimit sending with this transaction.
	GasLimit string `protobuf:"bytes,6,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// contract sending with this transaction
	Contract *ContractRequest `protobuf:"bytes,7,opt,name=contract" json:"contract,omitempty"`
	// binary data for transaction
	Binary []byte `protobuf:"bytes,10,opt,name=binary,proto3" json:"binary,omitempty"`
	// transaction payload type, enum:binary, deploy, call
	Type string `protobuf:"bytes,20,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *TransactionRequest) Reset()                    { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()               {}
func (*TransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{12} }

func (m *TransactionRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TransactionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionRequest) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *TransactionRequest) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *TransactionRequest) GetContract() *ContractRequest {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *TransactionRequest) GetBinary() []byte {
	if m != nil {
		return m.Binary
	}
	return nil
}

func (m *TransactionRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ContractRequest struct {
	// contract source code.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// contract source type, support javascript and typescript
	SourceType string `protobuf:"bytes,2,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	// call contract function name
	Function string `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// the params of contract.
	Args string `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
}

func (m *ContractRequest) Reset()                    { *m = ContractRequest{} }
func (m *ContractRequest) String() string            { return proto.CompactTextString(m) }
func (*ContractRequest) ProtoMessage()               {}
func (*ContractRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{13} }

func (m *ContractRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ContractRequest) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *ContractRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *ContractRequest) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

// Request message of SendRawTransactionRequest rpc.
type SendRawTransactionRequest struct {
	// Signed data of transaction
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SendRawTransactionRequest) Reset()                    { *m = SendRawTransactionRequest{} }
func (m *SendRawTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRawTransactionRequest) ProtoMessage()               {}
func (*SendRawTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{14} }

func (m *SendRawTransactionRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Response message of SendTransaction rpc.
type SendTransactionResponse struct {
	// Hex string of transaction hash.
	Txhash string `protobuf:"bytes,1,opt,name=txhash,proto3" json:"txhash,omitempty"`
	// Hex string of contract address if transaction is deploy type
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *SendTransactionResponse) Reset()                    { *m = SendTransactionResponse{} }
func (m *SendTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SendTransactionResponse) ProtoMessage()               {}
func (*SendTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{15} }

func (m *SendTransactionResponse) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *SendTransactionResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// Request message of GetBlockByHash rpc.
type GetBlockByHashRequest struct {
	// Hex string of block hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// If true it returns the full transaction objects, if false only the hashes of the transactions.
	FullFillTransaction bool `protobuf:"varint,2,opt,name=full_fill_transaction,json=fullFillTransaction,proto3" json:"full_fill_transaction,omitempty"`
}

func (m *GetBlockByHashRequest) Reset()                    { *m = GetBlockByHashRequest{} }
func (m *GetBlockByHashRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockByHashRequest) ProtoMessage()               {}
func (*GetBlockByHashRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{16} }

func (m *GetBlockByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *GetBlockByHashRequest) GetFullFillTransaction() bool {
	if m != nil {
		return m.FullFillTransaction
	}
	return false
}

// Request message of GetBlockByHeight rpc.
type GetBlockByHeightRequest struct {
	// block height.
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// If true it returns the full transaction objects, if false only the hashes of the transactions.
	FullFillTransaction bool `protobuf:"varint,2,opt,name=full_fill_transaction,json=fullFillTransaction,proto3" json:"full_fill_transaction,omitempty"`
}

func (m *GetBlockByHeightRequest) Reset()                    { *m = GetBlockByHeightRequest{} }
func (m *GetBlockByHeightRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockByHeightRequest) ProtoMessage()               {}
func (*GetBlockByHeightRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{17} }

func (m *GetBlockByHeightRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetBlockByHeightRequest) GetFullFillTransaction() bool {
	if m != nil {
		return m.FullFillTransaction
	}
	return false
}

// Request message of GetTransactionByHash rpc.
type GetTransactionByHashRequest struct {
	// Hex string of transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *GetTransactionByHashRequest) Reset()                    { *m = GetTransactionByHashRequest{} }
func (m *GetTransactionByHashRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionByHashRequest) ProtoMessage()               {}
func (*GetTransactionByHashRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{18} }

func (m *GetTransactionByHashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// Request message of GetTransactionByContract rpc.
type GetTransactionByContractRequest struct {
	// string of contract address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetTransactionByContractRequest) Reset()         { *m = GetTransactionByContractRequest{} }
func (m *GetTransactionByContractRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByContractRequest) ProtoMessage()    {}
func (*GetTransactionByContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRpc, []int{19}
}

func (m *GetTransactionByContractRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Response message of Block.
type BlockResponse struct {
	// Hex string of block hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Hex string of block parent hash.
	ParentHash string `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	// block height
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// block nonce
	Nonce uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Hex string of coinbase address.
	Coinbase string `protobuf:"bytes,5,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	// block timestamp.
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// block chain id
	ChainId uint32 `protobuf:"varint,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Hex string of state root.
	StateRoot string `protobuf:"bytes,8,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// Hex string of txs root.
	TxsRoot string `protobuf:"bytes,9,opt,name=txs_root,json=txsRoot,proto3" json:"txs_root,omitempty"`
	// Hex string of event root.
	EventsRoot string `protobuf:"bytes,10,opt,name=events_root,json=eventsRoot,proto3" json:"events_root,omitempty"`
	// Hex string of consensus root.
	ConsensusRoot *consensuspb.ConsensusRoot `protobuf:"bytes,11,opt,name=consensus_root,json=consensusRoot" json:"consensus_root,omitempty"`
	// Miner
	Miner string `protobuf:"bytes,12,opt,name=miner,proto3" json:"miner,omitempty"`
	// Random seed
	RandomSeed string `protobuf:"bytes,13,opt,name=randomSeed,proto3" json:"randomSeed,omitempty"`
	// Random proof
	RandomProof string `protobuf:"bytes,14,opt,name=randomProof,proto3" json:"randomProof,omitempty"`
	// is finaliy
	IsFinality bool `protobuf:"varint,15,opt,name=is_finality,json=isFinality,proto3" json:"is_finality,omitempty"`
	// transaction slice
	Transactions []*TransactionResponse `protobuf:"bytes,100,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *BlockResponse) Reset()                    { *m = BlockResponse{} }
func (m *BlockResponse) String() string            { return proto.CompactTextString(m) }
func (*BlockResponse) ProtoMessage()               {}
func (*BlockResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{20} }

func (m *BlockResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockResponse) GetParentHash() string {
	if m != nil {
		return m.ParentHash
	}
	return ""
}

func (m *BlockResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockResponse) GetCoinbase() string {
	if m != nil {
		return m.Coinbase
	}
	return ""
}

func (m *BlockResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BlockResponse) GetStateRoot() string {
	if m != nil {
		return m.StateRoot
	}
	return ""
}

func (m *BlockResponse) GetTxsRoot() string {
	if m != nil {
		return m.TxsRoot
	}
	return ""
}

func (m *BlockResponse) GetEventsRoot() string {
	if m != nil {
		return m.EventsRoot
	}
	return ""
}

func (m *BlockResponse) GetConsensusRoot() *consensuspb.ConsensusRoot {
	if m != nil {
		return m.ConsensusRoot
	}
	return nil
}

func (m *BlockResponse) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

func (m *BlockResponse) GetRandomSeed() string {
	if m != nil {
		return m.RandomSeed
	}
	return ""
}

func (m *BlockResponse) GetRandomProof() string {
	if m != nil {
		return m.RandomProof
	}
	return ""
}

func (m *BlockResponse) GetIsFinality() bool {
	if m != nil {
		return m.IsFinality
	}
	return false
}

func (m *BlockResponse) GetTransactions() []*TransactionResponse {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// Response message of TransactionReceipt.
type TransactionResponse struct {
	// Hex string of tx hash.
	Hash    string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ChainId uint32 `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	// Hex string of the sender account addresss.
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Hex string of the receiver account addresss.
	To    string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction nonce.
	Nonce           uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timestamp       int64  `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type            string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Data            []byte `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	GasPrice        string `protobuf:"bytes,10,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit        string `protobuf:"bytes,11,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	ContractAddress string `protobuf:"bytes,12,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// transaction status 0 failed, 1 success, 2 pending
	Status int32 `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	// transaction gas used
	GasUsed string `protobuf:"bytes,14,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// contract execute error
	ExecuteError string `protobuf:"bytes,15,opt,name=execute_error,json=executeError,proto3" json:"execute_error,omitempty"`
	// contract execute result
	ExecuteResult string `protobuf:"bytes,16,opt,name=execute_result,json=executeResult,proto3" json:"execute_result,omitempty"`
}

func (m *TransactionResponse) Reset()                    { *m = TransactionResponse{} }
func (m *TransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*TransactionResponse) ProtoMessage()               {}
func (*TransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{21} }

func (m *TransactionResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TransactionResponse) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *TransactionResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *TransactionResponse) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *TransactionResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TransactionResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactionResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TransactionResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransactionResponse) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *TransactionResponse) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *TransactionResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *TransactionResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TransactionResponse) GetGasUsed() string {
	if m != nil {
		return m.GasUsed
	}
	return ""
}

func (m *TransactionResponse) GetExecuteError() string {
	if m != nil {
		return m.ExecuteError
	}
	return ""
}

func (m *TransactionResponse) GetExecuteResult() string {
	if m != nil {
		return m.ExecuteResult
	}
	return ""
}

type NewAccountRequest struct {
	Passphrase string `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *NewAccountRequest) Reset()                    { *m = NewAccountRequest{} }
func (m *NewAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*NewAccountRequest) ProtoMessage()               {}
func (*NewAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{22} }

func (m *NewAccountRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type NewAccountResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *NewAccountResponse) Reset()                    { *m = NewAccountResponse{} }
func (m *NewAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*NewAccountResponse) ProtoMessage()               {}
func (*NewAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{23} }

func (m *NewAccountResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type UnlockAccountRequest struct {
	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Passphrase string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Duration   uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *UnlockAccountRequest) Reset()                    { *m = UnlockAccountRequest{} }
func (m *UnlockAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*UnlockAccountRequest) ProtoMessage()               {}
func (*UnlockAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{24} }

func (m *UnlockAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UnlockAccountRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

func (m *UnlockAccountRequest) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type UnlockAccountResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UnlockAccountResponse) Reset()                    { *m = UnlockAccountResponse{} }
func (m *UnlockAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*UnlockAccountResponse) ProtoMessage()               {}
func (*UnlockAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{25} }

func (m *UnlockAccountResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type LockAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *LockAccountRequest) Reset()                    { *m = LockAccountRequest{} }
func (m *LockAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*LockAccountRequest) ProtoMessage()               {}
func (*LockAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{26} }

func (m *LockAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LockAccountResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *LockAccountResponse) Reset()                    { *m = LockAccountResponse{} }
func (m *LockAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*LockAccountResponse) ProtoMessage()               {}
func (*LockAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{27} }

func (m *LockAccountResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type SignHashRequest struct {
	// sign address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// sign msg
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// sign algorithm
	Alg uint32 `protobuf:"varint,3,opt,name=alg,proto3" json:"alg,omitempty"`
}

func (m *SignHashRequest) Reset()                    { *m = SignHashRequest{} }
func (m *SignHashRequest) String() string            { return proto.CompactTextString(m) }
func (*SignHashRequest) ProtoMessage()               {}
func (*SignHashRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{28} }

func (m *SignHashRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SignHashRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *SignHashRequest) GetAlg() uint32 {
	if m != nil {
		return m.Alg
	}
	return 0
}

type SignHashResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SignHashResponse) Reset()                    { *m = SignHashResponse{} }
func (m *SignHashResponse) String() string            { return proto.CompactTextString(m) }
func (*SignHashResponse) ProtoMessage()               {}
func (*SignHashResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{29} }

func (m *SignHashResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GenerateRandomSeedRequest struct {
	// miner address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// parent seed of new block
	ParentSeed []byte `protobuf:"bytes,2,opt,name=parent_seed,json=parentSeed,proto3" json:"parent_seed,omitempty"`
	//  hash of new block's ancestor
	AncestorHash []byte `protobuf:"bytes,3,opt,name=ancestor_hash,json=ancestorHash,proto3" json:"ancestor_hash,omitempty"`
}

func (m *GenerateRandomSeedRequest) Reset()                    { *m = GenerateRandomSeedRequest{} }
func (m *GenerateRandomSeedRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateRandomSeedRequest) ProtoMessage()               {}
func (*GenerateRandomSeedRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{30} }

func (m *GenerateRandomSeedRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GenerateRandomSeedRequest) GetParentSeed() []byte {
	if m != nil {
		return m.ParentSeed
	}
	return nil
}

func (m *GenerateRandomSeedRequest) GetAncestorHash() []byte {
	if m != nil {
		return m.AncestorHash
	}
	return nil
}

type GenerateRandomSeedResponse struct {
	VrfSeed  []byte `protobuf:"bytes,1,opt,name=vrf_seed,json=vrfSeed,proto3" json:"vrf_seed,omitempty"`
	VrfProof []byte `protobuf:"bytes,2,opt,name=vrf_proof,json=vrfProof,proto3" json:"vrf_proof,omitempty"`
}

func (m *GenerateRandomSeedResponse) Reset()                    { *m = GenerateRandomSeedResponse{} }
func (m *GenerateRandomSeedResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateRandomSeedResponse) ProtoMessage()               {}
func (*GenerateRandomSeedResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{31} }

func (m *GenerateRandomSeedResponse) GetVrfSeed() []byte {
	if m != nil {
		return m.VrfSeed
	}
	return nil
}

func (m *GenerateRandomSeedResponse) GetVrfProof() []byte {
	if m != nil {
		return m.VrfProof
	}
	return nil
}

type SignTransactionPassphraseRequest struct {
	// transaction struct
	Transaction *TransactionRequest `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	// from account passphrase
	Passphrase string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *SignTransactionPassphraseRequest) Reset()         { *m = SignTransactionPassphraseRequest{} }
func (m *SignTransactionPassphraseRequest) String() string { return proto.CompactTextString(m) }
func (*SignTransactionPassphraseRequest) ProtoMessage()    {}
func (*SignTransactionPassphraseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRpc, []int{32}
}

func (m *SignTransactionPassphraseRequest) GetTransaction() *TransactionRequest {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *SignTransactionPassphraseRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type SignTransactionPassphraseResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SignTransactionPassphraseResponse) Reset()         { *m = SignTransactionPassphraseResponse{} }
func (m *SignTransactionPassphraseResponse) String() string { return proto.CompactTextString(m) }
func (*SignTransactionPassphraseResponse) ProtoMessage()    {}
func (*SignTransactionPassphraseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorRpc, []int{33}
}

func (m *SignTransactionPassphraseResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SendTransactionPassphraseRequest struct {
	// transaction struct
	Transaction *TransactionRequest `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	// from account passphrase
	Passphrase string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *SendTransactionPassphraseRequest) Reset()         { *m = SendTransactionPassphraseRequest{} }
func (m *SendTransactionPassphraseRequest) String() string { return proto.CompactTextString(m) }
func (*SendTransactionPassphraseRequest) ProtoMessage()    {}
func (*SendTransactionPassphraseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRpc, []int{34}
}

func (m *SendTransactionPassphraseRequest) GetTransaction() *TransactionRequest {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *SendTransactionPassphraseRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type GasPriceResponse struct {
	GasPrice string `protobuf:"bytes,1,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
}

func (m *GasPriceResponse) Reset()                    { *m = GasPriceResponse{} }
func (m *GasPriceResponse) String() string            { return proto.CompactTextString(m) }
func (*GasPriceResponse) ProtoMessage()               {}
func (*GasPriceResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{35} }

func (m *GasPriceResponse) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

// Request message of GetTransactionByHash rpc.
type HashRequest struct {
	// Hex string of block/transaction hash.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *HashRequest) Reset()                    { *m = HashRequest{} }
func (m *HashRequest) String() string            { return proto.CompactTextString(m) }
func (*HashRequest) ProtoMessage()               {}
func (*HashRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{36} }

func (m *HashRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type GasResponse struct {
	Gas string `protobuf:"bytes,1,opt,name=gas,proto3" json:"gas,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *GasResponse) Reset()                    { *m = GasResponse{} }
func (m *GasResponse) String() string            { return proto.CompactTextString(m) }
func (*GasResponse) ProtoMessage()               {}
func (*GasResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{37} }

func (m *GasResponse) GetGas() string {
	if m != nil {
		return m.Gas
	}
	return ""
}

func (m *GasResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type EventsResponse struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *EventsResponse) Reset()                    { *m = EventsResponse{} }
func (m *EventsResponse) String() string            { return proto.CompactTextString(m) }
func (*EventsResponse) ProtoMessage()               {}
func (*EventsResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{38} }

func (m *EventsResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Event struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Data  string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{39} }

func (m *Event) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Event) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type PprofRequest struct {
	Listen string `protobuf:"bytes,1,opt,name=listen,proto3" json:"listen,omitempty"`
}

func (m *PprofRequest) Reset()                    { *m = PprofRequest{} }
func (m *PprofRequest) String() string            { return proto.CompactTextString(m) }
func (*PprofRequest) ProtoMessage()               {}
func (*PprofRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{40} }

func (m *PprofRequest) GetListen() string {
	if m != nil {
		return m.Listen
	}
	return ""
}

type PprofResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *PprofResponse) Reset()                    { *m = PprofResponse{} }
func (m *PprofResponse) String() string            { return proto.CompactTextString(m) }
func (*PprofResponse) ProtoMessage()               {}
func (*PprofResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{41} }

func (m *PprofResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type GetConfigResponse struct {
	// Config
	Config *nebletpb.Config `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *GetConfigResponse) Reset()                    { *m = GetConfigResponse{} }
func (m *GetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConfigResponse) ProtoMessage()               {}
func (*GetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{42} }

func (m *GetConfigResponse) GetConfig() *nebletpb.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "rpcpb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "rpcpb.SubscribeResponse")
	proto.RegisterType((*NonParamsRequest)(nil), "rpcpb.NonParamsRequest")
	proto.RegisterType((*NodeInfoResponse)(nil), "rpcpb.NodeInfoResponse")
	proto.RegisterType((*RouteTable)(nil), "rpcpb.RouteTable")
	proto.RegisterType((*GetNebStateResponse)(nil), "rpcpb.GetNebStateResponse")
	proto.RegisterType((*AccountsResponse)(nil), "rpcpb.AccountsResponse")
	proto.RegisterType((*GetAccountStateRequest)(nil), "rpcpb.GetAccountStateRequest")
	proto.RegisterType((*GetAccountStateResponse)(nil), "rpcpb.GetAccountStateResponse")
	proto.RegisterType((*CallResponse)(nil), "rpcpb.CallResponse")
	proto.RegisterType((*ByBlockHeightRequest)(nil), "rpcpb.ByBlockHeightRequest")
	proto.RegisterType((*GetDynastyResponse)(nil), "rpcpb.GetDynastyResponse")
	proto.RegisterType((*TransactionRequest)(nil), "rpcpb.TransactionRequest")
	proto.RegisterType((*ContractRequest)(nil), "rpcpb.ContractRequest")
	proto.RegisterType((*SendRawTransactionRequest)(nil), "rpcpb.SendRawTransactionRequest")
	proto.RegisterType((*SendTransactionResponse)(nil), "rpcpb.SendTransactionResponse")
	proto.RegisterType((*GetBlockByHashRequest)(nil), "rpcpb.GetBlockByHashRequest")
	proto.RegisterType((*GetBlockByHeightRequest)(nil), "rpcpb.GetBlockByHeightRequest")
	proto.RegisterType((*GetTransactionByHashRequest)(nil), "rpcpb.GetTransactionByHashRequest")
	proto.RegisterType((*GetTransactionByContractRequest)(nil), "rpcpb.GetTransactionByContractRequest")
	proto.RegisterType((*BlockResponse)(nil), "rpcpb.BlockResponse")
	proto.RegisterType((*TransactionResponse)(nil), "rpcpb.TransactionResponse")
	proto.RegisterType((*NewAccountRequest)(nil), "rpcpb.NewAccountRequest")
	proto.RegisterType((*NewAccountResponse)(nil), "rpcpb.NewAccountResponse")
	proto.RegisterType((*UnlockAccountRequest)(nil), "rpcpb.UnlockAccountRequest")
	proto.RegisterType((*UnlockAccountResponse)(nil), "rpcpb.UnlockAccountResponse")
	proto.RegisterType((*LockAccountRequest)(nil), "rpcpb.LockAccountRequest")
	proto.RegisterType((*LockAccountResponse)(nil), "rpcpb.LockAccountResponse")
	proto.RegisterType((*SignHashRequest)(nil), "rpcpb.SignHashRequest")
	proto.RegisterType((*SignHashResponse)(nil), "rpcpb.SignHashResponse")
	proto.RegisterType((*GenerateRandomSeedRequest)(nil), "rpcpb.GenerateRandomSeedRequest")
	proto.RegisterType((*GenerateRandomSeedResponse)(nil), "rpcpb.GenerateRandomSeedResponse")
	proto.RegisterType((*SignTransactionPassphraseRequest)(nil), "rpcpb.SignTransactionPassphraseRequest")
	proto.RegisterType((*SignTransactionPassphraseResponse)(nil), "rpcpb.SignTransactionPassphraseResponse")
	proto.RegisterType((*SendTransactionPassphraseRequest)(nil), "rpcpb.SendTransactionPassphraseRequest")
	proto.RegisterType((*GasPriceResponse)(nil), "rpcpb.GasPriceResponse")
	proto.RegisterType((*HashRequest)(nil), "rpcpb.HashRequest")
	proto.RegisterType((*GasResponse)(nil), "rpcpb.GasResponse")
	proto.RegisterType((*EventsResponse)(nil), "rpcpb.EventsResponse")
	proto.RegisterType((*Event)(nil), "rpcpb.Event")
	proto.RegisterType((*PprofRequest)(nil), "rpcpb.PprofRequest")
	proto.RegisterType((*PprofResponse)(nil), "rpcpb.PprofResponse")
	proto.RegisterType((*GetConfigResponse)(nil), "rpcpb.GetConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	// Return the state of the neb.
	GetNebState(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetNebStateResponse, error)
	// Return the latest irreversible block.
	LatestIrreversibleBlock(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// Return the state of the account.
	GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error)
	// Call transaction
	Call(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// Submit the signed transaction.
	SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Get block info by the block hash.
	GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// Get block info by the block height.
	GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// Get transactionReceipt info by tansaction hash.
	GetTransactionReceipt(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Get transactionReceipt info by tansaction hash.
	GetTransactionByContract(ctx context.Context, in *GetTransactionByContractRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// Subscribe message
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error)
	// Get GasPrice
	GetGasPrice(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GasPriceResponse, error)
	// EstimateGas
	EstimateGas(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*GasResponse, error)
	GetEventsByHash(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetDynasty(ctx context.Context, in *ByBlockHeightRequest, opts ...grpc.CallOption) (*GetDynastyResponse, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetNebState(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetNebStateResponse, error) {
	out := new(GetNebStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetNebState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) LatestIrreversibleBlock(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/LatestIrreversibleBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetAccountState(ctx context.Context, in *GetAccountStateRequest, opts ...grpc.CallOption) (*GetAccountStateResponse, error) {
	out := new(GetAccountStateResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetAccountState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Call(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendRawTransaction(ctx context.Context, in *SendRawTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/SendRawTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlockByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetBlockByHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransactionReceipt(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetTransactionReceipt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTransactionByContract(ctx context.Context, in *GetTransactionByContractRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetTransactionByContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ApiService_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiService_serviceDesc.Streams[0], c.cc, "/rpcpb.ApiService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type apiServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *apiServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) GetGasPrice(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GasPriceResponse, error) {
	out := new(GasPriceResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetGasPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) EstimateGas(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*GasResponse, error) {
	out := new(GasResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/EstimateGas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetEventsByHash(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetEventsByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDynasty(ctx context.Context, in *ByBlockHeightRequest, opts ...grpc.CallOption) (*GetDynastyResponse, error) {
	out := new(GetDynastyResponse)
	err := grpc.Invoke(ctx, "/rpcpb.ApiService/GetDynasty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	// Return the state of the neb.
	GetNebState(context.Context, *NonParamsRequest) (*GetNebStateResponse, error)
	// Return the latest irreversible block.
	LatestIrreversibleBlock(context.Context, *NonParamsRequest) (*BlockResponse, error)
	// Return the state of the account.
	GetAccountState(context.Context, *GetAccountStateRequest) (*GetAccountStateResponse, error)
	// Call transaction
	Call(context.Context, *TransactionRequest) (*CallResponse, error)
	// Submit the signed transaction.
	SendRawTransaction(context.Context, *SendRawTransactionRequest) (*SendTransactionResponse, error)
	// Get block info by the block hash.
	GetBlockByHash(context.Context, *GetBlockByHashRequest) (*BlockResponse, error)
	// Get block info by the block height.
	GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*BlockResponse, error)
	// Get transactionReceipt info by tansaction hash.
	GetTransactionReceipt(context.Context, *GetTransactionByHashRequest) (*TransactionResponse, error)
	// Get transactionReceipt info by tansaction hash.
	GetTransactionByContract(context.Context, *GetTransactionByContractRequest) (*TransactionResponse, error)
	// Subscribe message
	Subscribe(*SubscribeRequest, ApiService_SubscribeServer) error
	// Get GasPrice
	GetGasPrice(context.Context, *NonParamsRequest) (*GasPriceResponse, error)
	// EstimateGas
	EstimateGas(context.Context, *TransactionRequest) (*GasResponse, error)
	GetEventsByHash(context.Context, *HashRequest) (*EventsResponse, error)
	GetDynasty(context.Context, *ByBlockHeightRequest) (*GetDynastyResponse, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_GetNebState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNebState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetNebState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNebState(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_LatestIrreversibleBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).LatestIrreversibleBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/LatestIrreversibleBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).LatestIrreversibleBlock(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetAccountState(ctx, req.(*GetAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).Call(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendRawTransaction(ctx, req.(*SendRawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockByHash(ctx, req.(*GetBlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlockByHeight(ctx, req.(*GetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransactionReceipt(ctx, req.(*GetTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTransactionByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTransactionByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetTransactionByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTransactionByContract(ctx, req.(*GetTransactionByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).Subscribe(m, &apiServiceSubscribeServer{stream})
}

type ApiService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type apiServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *apiServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_GetGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetGasPrice(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).EstimateGas(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetEventsByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetEventsByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetEventsByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetEventsByHash(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDynasty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDynasty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.ApiService/GetDynasty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDynasty(ctx, req.(*ByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNebState",
			Handler:    _ApiService_GetNebState_Handler,
		},
		{
			MethodName: "LatestIrreversibleBlock",
			Handler:    _ApiService_LatestIrreversibleBlock_Handler,
		},
		{
			MethodName: "GetAccountState",
			Handler:    _ApiService_GetAccountState_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _ApiService_Call_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _ApiService_SendRawTransaction_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _ApiService_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _ApiService_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _ApiService_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "GetTransactionByContract",
			Handler:    _ApiService_GetTransactionByContract_Handler,
		},
		{
			MethodName: "GetGasPrice",
			Handler:    _ApiService_GetGasPrice_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _ApiService_EstimateGas_Handler,
		},
		{
			MethodName: "GetEventsByHash",
			Handler:    _ApiService_GetEventsByHash_Handler,
		},
		{
			MethodName: "GetDynasty",
			Handler:    _ApiService_GetDynasty_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ApiService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// Client API for AdminService service

type AdminServiceClient interface {
	// Accounts return account list.
	Accounts(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	// NewAccount create a new account with passphrase
	NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*NewAccountResponse, error)
	// UnlockAccount unlock account with passphrase
	UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error)
	// LockAccount lock account
	LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// Sign sign msg
	SignHash(ctx context.Context, in *SignHashRequest, opts ...grpc.CallOption) (*SignHashResponse, error)
	GenerateRandomSeed(ctx context.Context, in *GenerateRandomSeedRequest, opts ...grpc.CallOption) (*GenerateRandomSeedResponse, error)
	// Sign sign transaction
	SignTransactionWithPassphrase(ctx context.Context, in *SignTransactionPassphraseRequest, opts ...grpc.CallOption) (*SignTransactionPassphraseResponse, error)
	// SendTransactionWithPassphrase send transaction with passphrase
	SendTransactionWithPassphrase(ctx context.Context, in *SendTransactionPassphraseRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	StartPprof(ctx context.Context, in *PprofRequest, opts ...grpc.CallOption) (*PprofResponse, error)
	// Get Config
	GetConfig(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// Return the p2p node info.
	NodeInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
}

type adminServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminServiceClient(cc *grpc.ClientConn) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Accounts(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/Accounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*NewAccountResponse, error) {
	out := new(NewAccountResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/NewAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*UnlockAccountResponse, error) {
	out := new(UnlockAccountResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/UnlockAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error) {
	out := new(LockAccountResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/LockAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SendTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SignHash(ctx context.Context, in *SignHashRequest, opts ...grpc.CallOption) (*SignHashResponse, error) {
	out := new(SignHashResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/SignHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GenerateRandomSeed(ctx context.Context, in *GenerateRandomSeedRequest, opts ...grpc.CallOption) (*GenerateRandomSeedResponse, error) {
	out := new(GenerateRandomSeedResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/GenerateRandomSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SignTransactionWithPassphrase(ctx context.Context, in *SignTransactionPassphraseRequest, opts ...grpc.CallOption) (*SignTransactionPassphraseResponse, error) {
	out := new(SignTransactionPassphraseResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/SignTransactionWithPassphrase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SendTransactionWithPassphrase(ctx context.Context, in *SendTransactionPassphraseRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/SendTransactionWithPassphrase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) StartPprof(ctx context.Context, in *PprofRequest, opts ...grpc.CallOption) (*PprofResponse, error) {
	out := new(PprofResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/StartPprof", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetConfig(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) NodeInfo(ctx context.Context, in *NonParamsRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := grpc.Invoke(ctx, "/rpcpb.AdminService/NodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminService service

type AdminServiceServer interface {
	// Accounts return account list.
	Accounts(context.Context, *NonParamsRequest) (*AccountsResponse, error)
	// NewAccount create a new account with passphrase
	NewAccount(context.Context, *NewAccountRequest) (*NewAccountResponse, error)
	// UnlockAccount unlock account with passphrase
	UnlockAccount(context.Context, *UnlockAccountRequest) (*UnlockAccountResponse, error)
	// LockAccount lock account
	LockAccount(context.Context, *LockAccountRequest) (*LockAccountResponse, error)
	// Verify, sign, and send the transaction.
	SendTransaction(context.Context, *TransactionRequest) (*SendTransactionResponse, error)
	// Sign sign msg
	SignHash(context.Context, *SignHashRequest) (*SignHashResponse, error)
	GenerateRandomSeed(context.Context, *GenerateRandomSeedRequest) (*GenerateRandomSeedResponse, error)
	// Sign sign transaction
	SignTransactionWithPassphrase(context.Context, *SignTransactionPassphraseRequest) (*SignTransactionPassphraseResponse, error)
	// SendTransactionWithPassphrase send transaction with passphrase
	SendTransactionWithPassphrase(context.Context, *SendTransactionPassphraseRequest) (*SendTransactionResponse, error)
	StartPprof(context.Context, *PprofRequest) (*PprofResponse, error)
	// Get Config
	GetConfig(context.Context, *NonParamsRequest) (*GetConfigResponse, error)
	// Return the p2p node info.
	NodeInfo(context.Context, *NonParamsRequest) (*NodeInfoResponse, error)
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Accounts(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).NewAccount(ctx, req.(*NewAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnlockAccount(ctx, req.(*UnlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).LockAccount(ctx, req.(*LockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SendTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SignHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SignHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/SignHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SignHash(ctx, req.(*SignHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GenerateRandomSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRandomSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GenerateRandomSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/GenerateRandomSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GenerateRandomSeed(ctx, req.(*GenerateRandomSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SignTransactionWithPassphrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionPassphraseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SignTransactionWithPassphrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/SignTransactionWithPassphrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SignTransactionWithPassphrase(ctx, req.(*SignTransactionPassphraseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SendTransactionWithPassphrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionPassphraseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SendTransactionWithPassphrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/SendTransactionWithPassphrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SendTransactionWithPassphrase(ctx, req.(*SendTransactionPassphraseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_StartPprof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PprofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).StartPprof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/StartPprof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).StartPprof(ctx, req.(*PprofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetConfig(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.AdminService/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).NodeInfo(ctx, req.(*NonParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accounts",
			Handler:    _AdminService_Accounts_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _AdminService_NewAccount_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _AdminService_UnlockAccount_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _AdminService_LockAccount_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _AdminService_SendTransaction_Handler,
		},
		{
			MethodName: "SignHash",
			Handler:    _AdminService_SignHash_Handler,
		},
		{
			MethodName: "GenerateRandomSeed",
			Handler:    _AdminService_GenerateRandomSeed_Handler,
		},
		{
			MethodName: "SignTransactionWithPassphrase",
			Handler:    _AdminService_SignTransactionWithPassphrase_Handler,
		},
		{
			MethodName: "SendTransactionWithPassphrase",
			Handler:    _AdminService_SendTransactionWithPassphrase_Handler,
		},
		{
			MethodName: "StartPprof",
			Handler:    _AdminService_StartPprof_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _AdminService_GetConfig_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _AdminService_NodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 2417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4b, 0x6f, 0x1b, 0xc9,
	0xf1, 0x07, 0xf5, 0x24, 0x8b, 0x94, 0x44, 0xb7, 0x5e, 0x23, 0xea, 0x61, 0xa9, 0xbd, 0x7f, 0x5b,
	0x6b, 0xec, 0x8a, 0x6b, 0x19, 0xf0, 0x3f, 0xf0, 0x62, 0x03, 0xd8, 0x8e, 0x57, 0xeb, 0xc0, 0x30,
	0x94, 0x91, 0x37, 0x59, 0x20, 0x71, 0x88, 0xe6, 0xb0, 0x49, 0x4e, 0x76, 0x34, 0xc3, 0x4c, 0x37,
	0x65, 0xcb, 0x39, 0x04, 0xf0, 0x39, 0x39, 0xe5, 0x92, 0x43, 0x90, 0xcf, 0x90, 0x2f, 0x90, 0x4f,
	0x91, 0x43, 0xae, 0x39, 0xe4, 0x73, 0x04, 0x41, 0x57, 0x77, 0xcf, 0x8b, 0x43, 0x31, 0xce, 0x21,
	0xb7, 0xe9, 0xea, 0xee, 0xaa, 0xea, 0x7a, 0xfc, 0xba, 0xaa, 0x07, 0x6a, 0xf1, 0xc8, 0x3b, 0x19,
	0xc5, 0x91, 0x8c, 0xc8, 0x62, 0x3c, 0xf2, 0x46, 0xdd, 0xd6, 0xde, 0x20, 0x8a, 0x06, 0x01, 0x6f,
	0xb3, 0x91, 0xdf, 0x66, 0x61, 0x18, 0x49, 0x26, 0xfd, 0x28, 0x14, 0x7a, 0x51, 0xeb, 0x07, 0x03,
	0x5f, 0x0e, 0xc7, 0xdd, 0x13, 0x2f, 0xba, 0x6c, 0x87, 0xbc, 0x3b, 0x0e, 0x98, 0xf0, 0xa3, 0xf6,
	0x20, 0xfa, 0xdc, 0x0c, 0xda, 0x5e, 0x14, 0x0a, 0x1e, 0x8a, 0xb1, 0x68, 0x8f, 0xba, 0x6d, 0x21,
	0x99, 0xe4, 0x66, 0xe7, 0xc3, 0xd9, 0x3b, 0x63, 0xae, 0x36, 0x75, 0x83, 0xc8, 0xfb, 0xde, 0x6c,
	0x7a, 0x34, 0x6b, 0x53, 0xc8, 0xbb, 0x01, 0x97, 0x6a, 0x9b, 0x17, 0x85, 0x7d, 0x7f, 0xa0, 0xf7,
	0xd1, 0xfb, 0xd0, 0xbc, 0x18, 0x77, 0x85, 0x17, 0xfb, 0x5d, 0xee, 0xf2, 0x5f, 0x8f, 0xb9, 0x90,
	0x64, 0x0b, 0x96, 0x64, 0x34, 0xf2, 0x3d, 0xe1, 0x54, 0x0e, 0xe7, 0x8f, 0x6b, 0xae, 0x19, 0xd1,
	0xaf, 0xe0, 0x56, 0x66, 0xad, 0x18, 0xa9, 0x03, 0x90, 0x0d, 0x58, 0xc4, 0x69, 0xa7, 0x72, 0x58,
	0x39, 0xae, 0xb9, 0x7a, 0x40, 0x08, 0x2c, 0xf4, 0x98, 0x64, 0xce, 0x1c, 0x12, 0xf1, 0x9b, 0x12,
	0x68, 0xbe, 0x8a, 0xc2, 0x73, 0x16, 0xb3, 0x4b, 0x61, 0x44, 0xd1, 0x3f, 0xcd, 0x29, 0x62, 0x8f,
	0xbf, 0x08, 0xfb, 0x51, 0xc2, 0x72, 0x15, 0xe6, 0xfc, 0x9e, 0xe1, 0x37, 0xe7, 0xf7, 0xc8, 0x0e,
	0x54, 0xbd, 0x21, 0xf3, 0xc3, 0x8e, 0xdf, 0x43, 0x86, 0x2b, 0xee, 0x32, 0x8e, 0x5f, 0xf4, 0x48,
	0x0b, 0xaa, 0x5e, 0xe4, 0x87, 0x5d, 0x26, 0xb8, 0x33, 0x8f, 0x1b, 0x92, 0x31, 0xd9, 0x07, 0x18,
	0x71, 0x1e, 0x77, 0xbc, 0x68, 0x1c, 0x4a, 0x67, 0x01, 0x37, 0xd6, 0x14, 0xe5, 0x99, 0x22, 0x10,
	0x0a, 0x0d, 0x71, 0x1d, 0x7a, 0xc3, 0x38, 0x0a, 0xfd, 0xf7, 0xbc, 0xe7, 0x2c, 0x1e, 0x56, 0x8e,
	0xab, 0x6e, 0x8e, 0x46, 0x6e, 0x43, 0xbd, 0x3b, 0xf6, 0xbe, 0xe7, 0xb2, 0x23, 0xfc, 0xf7, 0xdc,
	0x59, 0x3a, 0xac, 0x1c, 0x2f, 0xba, 0xa0, 0x49, 0x17, 0xfe, 0x7b, 0x4e, 0x3e, 0x85, 0x26, 0xda,
	0xd1, 0x8b, 0x82, 0xce, 0x15, 0x8f, 0x85, 0x1f, 0x85, 0x0e, 0xa0, 0x1e, 0x6b, 0x96, 0xfe, 0x53,
	0x4d, 0x26, 0xa7, 0x50, 0x8f, 0xa3, 0xb1, 0xe4, 0x1d, 0xc9, 0xba, 0x01, 0x77, 0xea, 0x87, 0xf3,
	0xc7, 0xf5, 0xd3, 0x5b, 0x27, 0x18, 0x4b, 0x27, 0xae, 0x9a, 0x79, 0xad, 0x26, 0x5c, 0x88, 0x93,
	0x6f, 0xfa, 0x08, 0x20, 0x9d, 0x99, 0xb0, 0x8b, 0x03, 0xcb, 0xac, 0xd7, 0x8b, 0xb9, 0x10, 0xce,
	0x1c, 0x3a, 0xca, 0x0e, 0xe9, 0xdf, 0x2b, 0xb0, 0x7e, 0xc6, 0xe5, 0x2b, 0xde, 0xbd, 0x50, 0x81,
	0x95, 0x58, 0x36, 0x6b, 0xc9, 0x4a, 0xde, 0x92, 0x04, 0x16, 0x24, 0xf3, 0x03, 0xeb, 0x31, 0xf5,
	0x4d, 0x9a, 0x30, 0x1f, 0xf8, 0x5d, 0x63, 0x58, 0xf5, 0xa9, 0x42, 0x63, 0xc8, 0xfd, 0xc1, 0x50,
	0xdb, 0x73, 0xc1, 0x35, 0xa3, 0x52, 0x3b, 0x2c, 0x95, 0xdb, 0xa1, 0x68, 0xf7, 0xe5, 0x12, 0xbb,
	0x3b, 0xb0, 0x6c, 0xb9, 0x54, 0x91, 0x8b, 0x1d, 0xd2, 0x2f, 0xa0, 0xf9, 0xc4, 0x43, 0x8f, 0x8a,
	0xe4, 0x54, 0x7b, 0x50, 0x33, 0x07, 0xe7, 0x36, 0x64, 0x53, 0x02, 0xfd, 0x31, 0x6c, 0x9d, 0x71,
	0x69, 0x36, 0x19, 0x73, 0xe8, 0x38, 0xcf, 0xd8, 0x4f, 0x1b, 0xd5, 0x0e, 0x33, 0xc7, 0x9c, 0xcb,
	0x1e, 0x93, 0xbe, 0x81, 0xed, 0x09, 0x5e, 0x46, 0x09, 0x07, 0x96, 0xbb, 0x2c, 0x60, 0xa1, 0xc7,
	0x2d, 0x33, 0x33, 0x54, 0x19, 0x12, 0x46, 0x8a, 0xae, 0x79, 0xe9, 0x01, 0xda, 0xfb, 0x7a, 0xa4,
	0xa3, 0x76, 0xc5, 0xc5, 0x6f, 0xfa, 0x2b, 0x68, 0x3c, 0x63, 0x41, 0x90, 0xf0, 0xdc, 0x82, 0xa5,
	0x98, 0x8b, 0x71, 0x20, 0x0d, 0x4b, 0x33, 0x52, 0x61, 0xc9, 0xdf, 0x71, 0x4f, 0x05, 0x13, 0x8f,
	0x63, 0xe3, 0x32, 0x30, 0xa4, 0xe7, 0x71, 0x4c, 0x8e, 0xa0, 0xc1, 0x85, 0xf4, 0x2f, 0x99, 0xe4,
	0x9d, 0x01, 0x13, 0xc6, 0x83, 0x75, 0x4b, 0x3b, 0x63, 0x82, 0x9e, 0xc0, 0xc6, 0xd3, 0xeb, 0xa7,
	0x0a, 0x41, 0xbe, 0xc1, 0xb3, 0x65, 0x92, 0xdf, 0x1c, 0xbd, 0x92, 0x3b, 0xfa, 0x67, 0x40, 0xce,
	0xb8, 0xfc, 0xd1, 0x75, 0xc8, 0x84, 0xbc, 0xce, 0x6a, 0x78, 0xe9, 0x87, 0x3c, 0x4e, 0xa0, 0x42,
	0x8f, 0xe8, 0xbf, 0x2a, 0x40, 0x5e, 0xc7, 0x2c, 0x14, 0xcc, 0x53, 0xa0, 0x68, 0x99, 0x13, 0x58,
	0xe8, 0xc7, 0xd1, 0xa5, 0x39, 0x0e, 0x7e, 0xab, 0xa8, 0x96, 0x91, 0x39, 0xc3, 0x9c, 0x8c, 0x94,
	0xb9, 0xae, 0x58, 0x30, 0xb6, 0xf9, 0xac, 0x07, 0xa9, 0x11, 0x17, 0xb2, 0x46, 0xdc, 0x85, 0xda,
	0x80, 0x89, 0xce, 0x28, 0xf6, 0x3d, 0x8e, 0x09, 0x5c, 0x73, 0xab, 0x03, 0x26, 0xce, 0xd5, 0xd8,
	0x4e, 0x06, 0xfe, 0xa5, 0x2f, 0x4d, 0x30, 0xaa, 0xc9, 0x97, 0x6a, 0x4c, 0x4e, 0x15, 0x70, 0x84,
	0x32, 0x66, 0x9e, 0xc4, 0x08, 0xac, 0x9f, 0x6e, 0x99, 0x54, 0x7c, 0x66, 0xc8, 0x46, 0x67, 0x37,
	0x59, 0xa7, 0x0e, 0xdb, 0xf5, 0x43, 0x16, 0x5f, 0x63, 0x8a, 0x37, 0x5c, 0x33, 0x4a, 0x5c, 0xb9,
	0x61, 0x52, 0x47, 0xb9, 0xf2, 0x3d, 0xac, 0x15, 0x18, 0xa9, 0xed, 0x22, 0x1a, 0xc7, 0x49, 0x80,
	0x98, 0x91, 0xf2, 0xa6, 0xfe, 0xea, 0x20, 0x17, 0xe3, 0x4d, 0x4d, 0x7a, 0x7d, 0x3d, 0xe2, 0x0a,
	0xe4, 0xfa, 0xe3, 0x10, 0x0d, 0x69, 0x41, 0xce, 0x8e, 0x95, 0x6c, 0x16, 0x0f, 0x04, 0x9a, 0xa5,
	0xe6, 0xe2, 0x37, 0x6d, 0xc3, 0xce, 0x05, 0x0f, 0x7b, 0x2e, 0x7b, 0x5b, 0xee, 0x02, 0x44, 0xe6,
	0x0a, 0x1e, 0x41, 0x23, 0xf3, 0x2f, 0x60, 0x5b, 0x6d, 0xc8, 0xad, 0x4e, 0x1d, 0x2c, 0xdf, 0x0d,
	0x99, 0x18, 0x5a, 0xa5, 0xf5, 0x48, 0x25, 0xbc, 0xb5, 0x4b, 0x27, 0x05, 0x21, 0x4c, 0x78, 0x4b,
	0x7f, 0x62, 0xc0, 0xa8, 0x03, 0x9b, 0x67, 0x5c, 0x62, 0xa8, 0x3d, 0xbd, 0xfe, 0x86, 0x89, 0x61,
	0x46, 0x95, 0x0c, 0x67, 0xfc, 0x26, 0xa7, 0xb0, 0xd9, 0x1f, 0x07, 0x41, 0xa7, 0xef, 0x07, 0x41,
	0x47, 0xa6, 0x0a, 0x21, 0xf3, 0xaa, 0xbb, 0xae, 0x26, 0xbf, 0xf6, 0x83, 0x20, 0xa3, 0x2b, 0xe5,
	0x98, 0x95, 0x56, 0xc0, 0x7f, 0x12, 0xcd, 0xff, 0x95, 0x98, 0x07, 0xb0, 0x7b, 0xc6, 0x65, 0x86,
	0x32, 0xf3, 0x34, 0xf4, 0x4b, 0xb8, 0x5d, 0xdc, 0x52, 0x8c, 0x8a, 0xa9, 0x20, 0x44, 0xff, 0xbc,
	0x00, 0x2b, 0x78, 0xa8, 0xc4, 0x19, 0x65, 0x06, 0xbb, 0x0d, 0xf5, 0x11, 0x8b, 0x79, 0x28, 0x3b,
	0x38, 0x65, 0xa2, 0x47, 0x93, 0x94, 0x7a, 0x19, 0x13, 0xcc, 0xe7, 0x4c, 0x50, 0x9e, 0x51, 0xd9,
	0x0b, 0x75, 0xb1, 0x70, 0xa1, 0xee, 0x41, 0x4d, 0xfa, 0x97, 0x5c, 0x48, 0x76, 0x39, 0xc2, 0x84,
	0x9a, 0x77, 0x53, 0x42, 0xee, 0x6e, 0x59, 0xce, 0xdf, 0x2d, 0xfb, 0x00, 0x58, 0xe0, 0x74, 0xe2,
	0x28, 0x92, 0x06, 0xd1, 0x6b, 0x48, 0x71, 0xa3, 0x48, 0xaa, 0x9d, 0xf2, 0x9d, 0xd0, 0x93, 0x35,
	0x6d, 0x03, 0xf9, 0x4e, 0xe0, 0x94, 0x42, 0xba, 0x2b, 0x1e, 0x4a, 0x33, 0x0b, 0x06, 0xe9, 0x90,
	0x84, 0x0b, 0x9e, 0xc0, 0x6a, 0x52, 0x48, 0xe9, 0x35, 0x75, 0xcc, 0xe6, 0xd6, 0x49, 0x42, 0xd6,
	0x39, 0xad, 0xbf, 0xd5, 0x1e, 0x77, 0xc5, 0xcb, 0x0e, 0x95, 0x21, 0x10, 0xb5, 0x9c, 0x86, 0x06,
	0x1c, 0x1c, 0x90, 0x03, 0x80, 0x98, 0x85, 0xbd, 0xe8, 0xf2, 0x82, 0xf3, 0x9e, 0xb3, 0xa2, 0x05,
	0xa7, 0x14, 0x72, 0x08, 0x75, 0x3d, 0x3a, 0x8f, 0xa3, 0xa8, 0xef, 0xac, 0x6a, 0x84, 0xcd, 0x90,
	0x94, 0xee, 0xbe, 0xe8, 0xf4, 0xfd, 0x90, 0x05, 0xbe, 0xbc, 0x76, 0xd6, 0x30, 0xb2, 0xc0, 0x17,
	0x5f, 0x1b, 0x0a, 0xf9, 0x21, 0x34, 0x32, 0xa1, 0x27, 0x9c, 0x1e, 0x96, 0x04, 0x2d, 0x83, 0x43,
	0x25, 0xd9, 0xe8, 0xe6, 0xd6, 0xd3, 0xbf, 0xce, 0xc3, 0x7a, 0x59, 0xce, 0x96, 0x85, 0x89, 0x03,
	0xd6, 0x1b, 0xc5, 0x12, 0xca, 0x62, 0xf2, 0xfc, 0x04, 0x26, 0x2f, 0x4c, 0x62, 0xf2, 0x62, 0x29,
	0x26, 0x2f, 0x65, 0x23, 0x28, 0x17, 0x25, 0xcb, 0xc5, 0x28, 0xb1, 0x58, 0x59, 0x4d, 0xb1, 0x32,
	0x81, 0xa4, 0x5a, 0x0a, 0x49, 0x79, 0x64, 0x87, 0x9b, 0x90, 0xbd, 0x5e, 0x40, 0xf6, 0x32, 0x64,
	0x6a, 0x94, 0x22, 0x13, 0x22, 0xb2, 0x64, 0x72, 0x2c, 0xd0, 0xbf, 0x8b, 0xae, 0x19, 0xa9, 0x80,
	0x54, 0xfc, 0xc7, 0x82, 0xf7, 0x8c, 0x63, 0x97, 0x07, 0x4c, 0x7c, 0x2b, 0x78, 0x8f, 0xdc, 0x81,
	0x95, 0xcc, 0xd5, 0x1b, 0xc5, 0xe8, 0xd6, 0x9a, 0xdb, 0x48, 0x2f, 0xdf, 0x28, 0x26, 0xff, 0x07,
	0xab, 0x76, 0x91, 0xb9, 0xbf, 0x9b, 0xb8, 0xca, 0x6e, 0x75, 0x91, 0x48, 0x1f, 0xc2, 0xad, 0x57,
	0xfc, 0xad, 0xa9, 0x26, 0x2c, 0x1e, 0x1c, 0x00, 0x8c, 0x98, 0x10, 0xa3, 0x61, 0xac, 0x52, 0xb0,
	0x62, 0xd3, 0xd9, 0x52, 0xe8, 0x09, 0x90, 0xec, 0xa6, 0xb4, 0xfa, 0x98, 0x82, 0x22, 0x01, 0x6c,
	0x7c, 0x1b, 0x2a, 0x14, 0x29, 0xc8, 0x99, 0x5e, 0xfc, 0xe4, 0x35, 0x98, 0x2b, 0x6a, 0xa0, 0x20,
	0xa2, 0x37, 0x8e, 0x59, 0x72, 0x1d, 0x2d, 0xb8, 0xc9, 0x98, 0xb6, 0x61, 0xb3, 0x20, 0xad, 0xb4,
	0x94, 0xa9, 0xda, 0x52, 0x46, 0x1d, 0xe7, 0xe5, 0x47, 0x28, 0x47, 0x3f, 0x87, 0xf5, 0x97, 0x1f,
	0xc1, 0xfe, 0x27, 0xb0, 0x76, 0xe1, 0x0f, 0xc2, 0x2c, 0x4e, 0x4f, 0x3f, 0xb8, 0xcd, 0x9b, 0x39,
	0x1d, 0x87, 0x98, 0x37, 0x4d, 0x98, 0x67, 0xc1, 0xc0, 0x54, 0x69, 0xea, 0x93, 0xde, 0x85, 0x66,
	0xca, 0x32, 0xcd, 0xb8, 0x89, 0x4b, 0xf5, 0x37, 0xb0, 0x73, 0xc6, 0x43, 0x1e, 0x2b, 0x94, 0x4b,
	0x60, 0x63, 0xb6, 0x12, 0x29, 0x9e, 0x0b, 0x05, 0x3c, 0x5a, 0x17, 0x83, 0xe7, 0x08, 0x3c, 0x77,
	0x60, 0x45, 0x95, 0x95, 0x42, 0x46, 0xb1, 0x86, 0xfc, 0x79, 0x5c, 0xd2, 0xb0, 0x44, 0xa5, 0x18,
	0x7d, 0x0d, 0xad, 0x32, 0xe1, 0x69, 0x1b, 0x70, 0x15, 0xf7, 0xb5, 0x00, 0xad, 0xf2, 0xf2, 0x55,
	0xdc, 0x47, 0xee, 0xbb, 0x50, 0x53, 0x53, 0x23, 0x04, 0x35, 0x2d, 0x5c, 0xad, 0x45, 0x44, 0xa3,
	0xbf, 0x85, 0x43, 0x75, 0xf4, 0x0c, 0xe6, 0x9c, 0x27, 0x61, 0x61, 0x4f, 0xf6, 0x25, 0xd4, 0xb3,
	0xf7, 0x69, 0x05, 0xd1, 0x78, 0xa7, 0x0c, 0xd3, 0x74, 0x79, 0x95, 0x5d, 0x3d, 0x2b, 0xf4, 0xe8,
	0xff, 0xc3, 0xd1, 0x0d, 0x0a, 0xdc, 0xe0, 0x0c, 0xa5, 0x79, 0xbe, 0xc2, 0xf9, 0x1f, 0x6b, 0xde,
	0x86, 0xe6, 0x99, 0x81, 0xaf, 0x44, 0xd1, 0x1c, 0xc6, 0x55, 0xf2, 0x18, 0x47, 0x8f, 0xa0, 0x3e,
	0xab, 0xba, 0x78, 0x00, 0xf5, 0x33, 0x96, 0xb6, 0x41, 0x4d, 0x98, 0x57, 0xb5, 0xbe, 0x5e, 0xa1,
	0x3e, 0x15, 0x25, 0xed, 0x0f, 0xd4, 0x27, 0x7d, 0x04, 0xab, 0xcf, 0xf5, 0xe5, 0x69, 0x77, 0x7d,
	0x02, 0x4b, 0xfa, 0x3a, 0xc5, 0x0a, 0xbe, 0x7e, 0xda, 0x30, 0x07, 0xc6, 0x65, 0xae, 0x99, 0xa3,
	0x0f, 0x60, 0x11, 0x09, 0x1f, 0xd1, 0xee, 0xdf, 0x85, 0xc6, 0xf9, 0x28, 0x8e, 0xfa, 0x99, 0x52,
	0x2c, 0xf0, 0x85, 0xe4, 0xa1, 0xad, 0x24, 0xf5, 0x88, 0xde, 0x83, 0x15, 0xb3, 0x6e, 0x46, 0x2e,
	0x7f, 0x05, 0xb7, 0xce, 0xb8, 0x7c, 0x86, 0xaf, 0x17, 0xc9, 0xe2, 0x63, 0x58, 0xd2, 0xef, 0x19,
	0xc6, 0x5f, 0xcd, 0x13, 0xfd, 0xd0, 0xa1, 0x2f, 0x7d, 0xb5, 0xd2, 0xcc, 0x9f, 0xfe, 0xa3, 0x0e,
	0xf0, 0x64, 0xe4, 0x5f, 0xf0, 0xf8, 0x4a, 0xdd, 0x21, 0x6f, 0xa0, 0x9e, 0xe9, 0x90, 0xc9, 0xb6,
	0x39, 0x76, 0xf1, 0x85, 0xa2, 0x65, 0xaf, 0xe3, 0x92, 0x76, 0x9a, 0xee, 0x7c, 0xf8, 0xdb, 0x3f,
	0xff, 0x30, 0xb7, 0x4e, 0x6e, 0xb5, 0xaf, 0x1e, 0xb4, 0xc7, 0x82, 0xc7, 0xed, 0x90, 0x77, 0xb1,
	0xae, 0x21, 0xbf, 0x84, 0xed, 0x97, 0x4c, 0x72, 0x21, 0x5f, 0xc4, 0x31, 0xc7, 0xe6, 0xb5, 0x1b,
	0x70, 0xac, 0xe6, 0xa6, 0x8b, 0xda, 0x30, 0x13, 0xb9, 0xa2, 0x8f, 0x6e, 0xa0, 0x90, 0x55, 0xd2,
	0x48, 0x84, 0xa8, 0x46, 0x3c, 0x86, 0xb5, 0x42, 0x27, 0x4a, 0xf6, 0x53, 0x4d, 0x4b, 0xba, 0xdd,
	0xd6, 0xc1, 0xb4, 0x69, 0x23, 0xe7, 0x10, 0xe5, 0xb4, 0xe8, 0x66, 0x22, 0x87, 0x99, 0x46, 0x5b,
	0x2d, 0x7b, 0x5c, 0xb9, 0x4f, 0xce, 0x61, 0x41, 0xb5, 0xa7, 0x64, 0x7a, 0x4e, 0xb4, 0xd6, 0x6d,
	0x13, 0x95, 0x69, 0x63, 0xa9, 0x83, 0x9c, 0x09, 0x5d, 0x49, 0x38, 0x7b, 0x2c, 0x08, 0x14, 0xc7,
	0xf7, 0x40, 0x26, 0x3b, 0x15, 0x72, 0x68, 0x98, 0x4c, 0x6d, 0x62, 0x92, 0xb3, 0x4c, 0xe9, 0x5a,
	0x28, 0x45, 0x89, 0x7b, 0x74, 0x3b, 0x91, 0x18, 0xb3, 0xb7, 0x99, 0x74, 0x55, 0xb2, 0x87, 0xb0,
	0x9a, 0x6f, 0x4b, 0xc8, 0x5e, 0x6a, 0xa1, 0xc9, 0x6e, 0x65, 0x8a, 0x77, 0x26, 0x25, 0x0d, 0x72,
	0xbb, 0x95, 0xa4, 0x10, 0x9a, 0xc5, 0xfe, 0x84, 0x1c, 0x4c, 0xca, 0xca, 0x36, 0x2e, 0x53, 0xa4,
	0x7d, 0x82, 0xd2, 0x0e, 0xe8, 0x4e, 0x99, 0x34, 0xdc, 0xaf, 0xe4, 0x7d, 0xa8, 0x60, 0xc7, 0x95,
	0x33, 0x8c, 0xc7, 0xfd, 0x91, 0x24, 0x34, 0x95, 0x3a, 0xad, 0x8f, 0x69, 0xdd, 0x50, 0x7f, 0xd2,
	0x4f, 0x51, 0xfe, 0x1d, 0x7a, 0x90, 0x95, 0x3f, 0x29, 0x47, 0x29, 0xf1, 0xbb, 0x0a, 0x38, 0xd3,
	0x7a, 0x1f, 0x72, 0x77, 0x8a, 0x1e, 0x85, 0xe6, 0xe8, 0x46, 0x5d, 0x3e, 0x43, 0x5d, 0xee, 0xd2,
	0xa3, 0x29, 0xba, 0xa4, 0xdc, 0x94, 0x3a, 0x1d, 0xa8, 0x25, 0x6f, 0x97, 0x49, 0x06, 0x16, 0x5f,
	0x3e, 0x5b, 0xce, 0xe4, 0x84, 0x91, 0xb6, 0x8f, 0xd2, 0xb6, 0x29, 0x49, 0xa4, 0x09, 0xbb, 0xe6,
	0x71, 0xe5, 0xfe, 0x17, 0x15, 0x83, 0x27, 0x16, 0xe3, 0xa7, 0x27, 0xb9, 0x9d, 0x28, 0xde, 0x06,
	0x74, 0x0f, 0x25, 0x6c, 0x91, 0x8d, 0xec, 0x79, 0x12, 0x7e, 0x6f, 0xa0, 0xfe, 0x3c, 0x7d, 0xbd,
	0xb9, 0x29, 0x05, 0x49, 0x2a, 0x20, 0xe1, 0x7d, 0x1b, 0x79, 0xef, 0xd0, 0x94, 0x77, 0xe6, 0x29,
	0x48, 0x99, 0x87, 0x21, 0x9c, 0xe8, 0xab, 0xc1, 0x64, 0x83, 0xe5, 0x93, 0x8d, 0x8d, 0xcd, 0xec,
	0xe5, 0x90, 0xb2, 0xbf, 0x83, 0xec, 0xf7, 0xa9, 0x93, 0x55, 0x3d, 0xcb, 0x4c, 0x8b, 0x80, 0xf4,
	0x01, 0x89, 0xec, 0xda, 0xf8, 0x2e, 0x79, 0x83, 0x6a, 0xed, 0xa4, 0xe1, 0x51, 0x78, 0x70, 0xa2,
	0xbb, 0x28, 0x6a, 0x93, 0x36, 0x13, 0x51, 0x3d, 0xbd, 0xe2, 0x71, 0xe5, 0xfe, 0xe9, 0x5f, 0x00,
	0x1a, 0x4f, 0x7a, 0x97, 0x7e, 0x68, 0x41, 0xfe, 0x3b, 0xa8, 0xda, 0xd7, 0xc2, 0xd9, 0x1e, 0x29,
	0xbe, 0x2b, 0xd2, 0x16, 0xca, 0xda, 0x20, 0xe8, 0x73, 0xa6, 0xf8, 0x26, 0x90, 0x48, 0x3c, 0x80,
	0xb4, 0x0c, 0x27, 0x36, 0x6e, 0x26, 0xca, 0xf9, 0xe4, 0x28, 0x93, 0x35, 0x7b, 0x1e, 0x70, 0x73,
	0xec, 0xdb, 0x21, 0x7f, 0xab, 0x4c, 0x16, 0xc1, 0x4a, 0xae, 0x9a, 0x4e, 0xac, 0x56, 0x56, 0xd1,
	0xb7, 0xf6, 0xca, 0x27, 0xcb, 0x7c, 0x94, 0x97, 0x36, 0xc6, 0x0d, 0x4a, 0xe0, 0x00, 0xea, 0x99,
	0xea, 0x3a, 0x89, 0xb2, 0xc9, 0x0a, 0x3d, 0xc9, 0xcc, 0x92, 0x62, 0x9c, 0x1e, 0xa1, 0xa8, 0x5d,
	0xba, 0x35, 0x29, 0xca, 0x0a, 0x0a, 0x61, 0xad, 0x80, 0xdd, 0x37, 0x85, 0xf4, 0x2c, 0xb8, 0x2f,
	0xb1, 0x64, 0x01, 0xec, 0x7f, 0x0e, 0x55, 0x5b, 0xb4, 0x13, 0xfb, 0xd0, 0x57, 0x68, 0x0c, 0x92,
	0x38, 0x28, 0x56, 0xf7, 0xf4, 0x00, 0xd9, 0x3b, 0x74, 0x3d, 0x65, 0x2f, 0xfc, 0x41, 0xd8, 0x1e,
	0x9a, 0xc8, 0xfe, 0x50, 0x01, 0x32, 0x59, 0x6d, 0x27, 0xd7, 0xd8, 0xd4, 0x2e, 0xa0, 0x75, 0x74,
	0xc3, 0x0a, 0x23, 0xfb, 0x1e, 0xca, 0x3e, 0xa2, 0x7b, 0xa9, 0xec, 0xc1, 0xc4, 0x6a, 0xa5, 0xc4,
	0xef, 0x2b, 0xb0, 0x5f, 0xa8, 0x8d, 0x7f, 0xe6, 0xcb, 0x61, 0x5a, 0xe6, 0x92, 0x7b, 0x99, 0xf3,
	0xdd, 0x54, 0x08, 0xb7, 0x8e, 0x67, 0x2f, 0xcc, 0x17, 0x40, 0x74, 0x35, 0x6f, 0x19, 0xa5, 0xcf,
	0x1f, 0x95, 0x3e, 0x79, 0x7f, 0x4d, 0xd3, 0x67, 0x46, 0x61, 0x3e, 0xd3, 0xfd, 0x27, 0xa8, 0xc5,
	0x31, 0xbd, 0x53, 0xea, 0xfe, 0xbc, 0x54, 0xa5, 0xda, 0x05, 0xc0, 0x85, 0x64, 0xb1, 0xc4, 0xb2,
	0x93, 0xd8, 0x92, 0x25, 0x5b, 0xac, 0x26, 0xd7, 0x6f, 0xae, 0x32, 0xb5, 0x80, 0x40, 0xd7, 0x52,
	0x41, 0x23, 0xb5, 0x40, 0x47, 0x58, 0x2d, 0xa9, 0x4e, 0xa7, 0x63, 0x8d, 0x93, 0x22, 0x5b, 0xbe,
	0x90, 0xb5, 0xc0, 0x46, 0xd6, 0xb3, 0x8e, 0xb6, 0xfc, 0xbe, 0x83, 0xaa, 0xfd, 0x4b, 0x36, 0x1b,
	0xc7, 0x8a, 0xff, 0xd3, 0xca, 0x70, 0x2c, 0x8c, 0x7a, 0xdc, 0x0f, 0xfb, 0x51, 0x77, 0x09, 0x7f,
	0xcf, 0x3c, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x93, 0x9a, 0x0e, 0xdf, 0x1c, 0x00,
	0x00,
}
